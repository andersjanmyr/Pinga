// Generated by CoffeeScript 1.8.0
(function() {
  var PINGS, SendGrid, SocketResource, URLS, app, bodyParser, express, http, io, item, methodOverride, pingHost, port, request, sendEmail, sendgrid, server, since, socketio, timestamp, _fn, _i, _len;

  http = require('http');

  request = require('request');

  express = require('express');

  bodyParser = require('body-parser');

  methodOverride = require('method-override');

  socketio = require('socket.io');

  SendGrid = require('sendgrid');

  SocketResource = require('./socket-resource');

  sendgrid = SendGrid(process.env.SENDGRID_USERNAME, process.env.SENDGRID_PASSWORD);

  URLS = [
    {
      id: '1',
      url: 'http://www.equilo.se'
    }, {
      id: '2',
      url: 'http://anders-errbit.herokuapp.com'
    }, {
      id: '3',
      url: 'http://test-env.herokuapp.com/env'
    }, {
      id: '4',
      url: 'http://pinga.herokuapp.com'
    }, {
      id: '5',
      url: 'http://tapirs.herokuapp.com'
    }, {
      id: '6',
      url: 'http://functional-javascript.herokuapp.com'
    }, {
      id: '7',
      url: 'http://death-clock.herokuapp.com'
    }, {
      id: '8',
      url: 'http://sparklingandwine.herokuapp.com'
    }, {
      id: '9',
      url: 'http://vocabulary.janmyr.com'
    }
  ];

  PINGS = [];

  port = process.env.PORT || process.env.VMC_APP_PORT || 4000;

  app = express();

  server = http.createServer(app);

  server.listen(port);

  app.use(bodyParser.json());

  app.use(methodOverride());

  app.use(express["static"]("" + __dirname + "/../public"));

  app.set('views', "" + __dirname + "/../views");

  app.set('view options', {
    layout: false
  });

  app.get('/pings', function(req, resp) {
    return resp.send(PINGS);
  });

  console.log(process.env);

  console.log("Starting on port " + port);

  console.log("Serving files from " + __dirname + "/../public");

  timestamp = function() {
    var d, date, time;
    d = new Date;
    date = "" + (d.getFullYear()) + "-" + (d.getMonth() + 1) + "-" + (d.getDate());
    time = "" + (d.getHours()) + ":" + (d.getMinutes()) + ":" + (d.getSeconds());
    return "" + date + " " + time;
  };

  pingHost = function(url) {
    return request(url, function(err, response, body) {
      if (err) {
        return console.log(err);
      }
      while (PINGS.length > 100) {
        PINGS.pop();
      }
      PINGS.unshift([url, response.statusCode, timestamp()]);
      if (response.statusCode !== 200) {
        return sendEmail("" + url + " failed", "" + url + " failed with status " + response.statusCode);
      }
    });
  };

  sendEmail = function(subject, body) {
    return sendgrid.send({
      from: 'pinga@janmyr.com',
      to: 'anders@janmyr.com',
      subject: subject,
      text: body
    }, function(success, errors) {
      if (!success) {
        return console.log(errors);
      }
    });
  };

  _fn = function(item) {
    var pingUrl;
    pingUrl = function() {
      return pingHost(item.url);
    };
    setInterval(pingUrl, 15 * 60 * 1000);
    return pingUrl();
  };
  for (_i = 0, _len = URLS.length; _i < _len; _i++) {
    item = URLS[_i];
    _fn(item);
  }

  sendEmail('Pinga restarted', timestamp());

  since = timestamp();

  io = socketio.listen(server);

  io.sockets.on('connection', function(socket) {
    socket.emit('status', {
      runningSince: since
    });
    return new SocketResource(socket, 'urls', {
      read: function(data, callback) {
        return callback(null, URLS);
      }
    });
  });

}).call(this);
